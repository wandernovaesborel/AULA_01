{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri-Bold;}{\f1\fnil\fcharset1 Segoe UI Symbol;}{\f2\fnil\fcharset128 ArialMT;}{\f3\fnil\fcharset0 Calibri;}}
{\colortbl ;\red89\green52\blue148;\red255\green154\blue0;\red0\green0\blue0;\red192\green192\blue192;\red0\green64\blue0;\red128\green0\blue0;\red128\green0\blue64;\red0\green0\blue64;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sl240\slmult1\qj\b\f0\fs32\lang22 TEMA 01\par
Introdu\'e7\'e3o ao Javascript\par
\cf1\fs28 Habilidades\par
\cf2\b0\f1\fs22\u9679?\f2  \cf3\f3 Introdu\'e7\'e3o as regras JavaScript\par
\cf2\f1\u9679?\f2  \cf3\f3 Utilizar ambientes de desenvolvimento de software\par
\cf1\b\f0\fs28\par
\cf0\highlight4\f3\fs22  Introdu\'e7\'e3o ao JavaScript\par
\highlight0\b0\par
\b Objetivos:\par
\b0 - Compreender as regras b\'e1sicas do JavaScript.\par
- Utilizar ambientes de desenvolvimento de software.\par
\par
\b Origem do JavaScript:\par
\b0 JavaScript foi criado em 1995 por Brendan Eich enquanto trabalhava para a Netscape. Na \'e9poca, a web estava em seus primeiros passos e o HTML era a principal ferramenta para criar sites. A ideia de Eich foi criar uma linguagem de script simples e din\'e2mica para adicionar interatividade aos navegadores, o que levou ao desenvolvimento do JavaScript. Inicialmente chamado "Mocha", o JavaScript evoluiu rapidamente e se tornou uma parte essencial da web.\par
\par
\b Evolu\'e7\'e3o e Padroniza\'e7\'e3o:\par
\b0 Em 1996, a Netscape colaborou com a ECMA International para padronizar o JavaScript, resultando na cria\'e7\'e3o do ECMAScript. Isso estabeleceu as bases para a linguagem e garantiu a sua evolu\'e7\'e3o constante. Vale destacar que JavaScript e Java n\'e3o s\'e3o a mesma coisa e n\'e3o t\'eam rela\'e7\'e3o direta entre si.\par
\par
\b JavaScript Hoje:\par
\b0 JavaScript \'e9 uma linguagem de programa\'e7\'e3o muito vers\'e1til e n\'e3o se limita apenas \'e0 web. Ele \'e9 usado em v\'e1rias plataformas, incluindo motores gr\'e1ficos como Unity 3D. A linguagem \'e9 conhecida por sua flexibilidade e por permitir a cria\'e7\'e3o de uma ampla gama de aplica\'e7\'f5es.\par
\par
\highlight4\b  Componentes Principais do JavaScript:\par
\highlight0\b0\par
\b 1. Front-End vs. Back-End:\par
   - Front-End: \b0 Refere-se \'e0 parte vis\'edvel e interativa de um site ou aplicativo com a qual os usu\'e1rios interagem diretamente. Utiliza HTML, CSS e JavaScript para criar interfaces e melhorar a experi\'eancia do usu\'e1rio.\par
\b    - Back-End: \b0 Refere-se \'e0 parte que lida com a l\'f3gica, processamento e gerenciamento de dados no servidor. Envolve a cria\'e7\'e3o e manuten\'e7\'e3o de servidores, bancos de dados e APIs que suportam as funcionalidades do front-end.\par
\par
\b 2. Documentos JavaScript:\par
\b0    - S\'e3o arquivos que cont\'eam c\'f3digo JavaScript incorporado em p\'e1ginas HTML para adicionar interatividade e funcionalidades din\'e2micas. Eles permitem a manipula\'e7\'e3o do DOM, valida\'e7\'e3o de dados, requisi\'e7\'f5es ass\'edncronas e muito mais.\par
\par
\highlight4\b  Sintaxe JavaScript:\par
\highlight0\b0\par
\b - Declara\'e7\'e3o de Vari\'e1veis: \b0 Utilize `var`, `let` ou `const` para declarar vari\'e1veis. As vari\'e1veis podem conter letras, n\'fameros e sublinhados, mas n\'e3o podem come\'e7ar com um n\'famero.\par
  \par
\b - Coment\'e1rios: \b0 Coment\'e1rios ajudam a documentar o c\'f3digo. Use `//` para coment\'e1rios de linha \'fanica e `/* */` para coment\'e1rios de m\'faltiplas linhas.\par
\par
\b - Instru\'e7\'f5es e Express\'f5es: \b0 Instru\'e7\'f5es executam a\'e7\'f5es e podem incluir express\'f5es. Express\'f5es produzem valores.\par
\par
\b - Estruturas de Controle: \b0 `if`, `for` e `while` permitem controlar o fluxo do programa.\par
\par
\b - Fun\'e7\'f5es: \b0 Blocos de c\'f3digo reutiliz\'e1veis que podem receber par\'e2metros e retornar valores.\par
\par
\b - Objetos e Arrays: \b0 Objetos s\'e3o cole\'e7\'f5es de pares chave-valor e arrays s\'e3o listas ordenadas de valores.\par
\par
\b - Operadores: \b0 Utilizados para opera\'e7\'f5es matem\'e1ticas, compara\'e7\'f5es e l\'f3gicas.\par
\par
\highlight4\b  Comandos em Ingl\'eas:\par
\highlight0\b0\par
Os comandos em JavaScript s\'e3o em ingl\'eas devido \'e0 sua origem hist\'f3rica e \'e0 predomin\'e2ncia do ingl\'eas na tecnologia da informa\'e7\'e3o. Isso facilita a colabora\'e7\'e3o global, integra\'e7\'e3o com outras tecnologias e acesso a documenta\'e7\'e3o e recursos educacionais.\par
\par
\highlight4\b  Desenvolvimento de Aplicativos M\'f3veis:\par
\highlight0\b0\par
Para se tornar um desenvolvedor de aplicativos m\'f3veis, \'e9 essencial aprender:\par
\b - Linguagens de Programa\'e7\'e3o: \b0 Swift (iOS), Kotlin (Android), JavaScript (React Native), Dart (Flutter).\par
\b - Ambientes de Desenvolvimento: \b0 Xcode (iOS), Android Studio (Android), Visual Studio Code (multiplataforma).\par
\b - Frameworks e Bibliotecas: \b0 React Native, Flutter, NativeScript.\par
\b - Design Responsivo e UI/UX: \b0 Princ\'edpios para criar interfaces eficazes.\par
\b - Consumo de APIs e Armazenamento de Dados: \b0 Integra\'e7\'e3o com servi\'e7os externos e armazenamento local.\par
\b - Testes, Depura\'e7\'e3o e Publica\'e7\'e3o: \b0 Garantir a qualidade do aplicativo e distribu\'ed-lo em lojas de aplicativos.\par
\par
\highlight4\b  Ambiente de Desenvolvimento:\par
\highlight0\b0\par
Para programar em JavaScript, \'e9 importante escolher um editor de c\'f3digo apropriado, como Sublime, Notepad++ ou Visual Studio Code (VSCode). Cada editor tem suas caracter\'edsticas, e a escolha pode depender das prefer\'eancias pessoais e necessidades do projeto.\par
\par
\highlight4\b  ECMA e JavaScript: Rela\'e7\'e3o e Contexto\par
\highlight0\b0\par
\b 1. O que \'e9 a ECMA?\par
\b0\par
A ECMA International (European Computer Manufacturers Association) \'e9 uma organiza\'e7\'e3o internacional que trabalha para estabelecer padr\'f5es em tecnologia da informa\'e7\'e3o e comunica\'e7\'e3o. Fundada em 1961, a ECMA \'e9 conhecida por criar e manter normas para v\'e1rias tecnologias, incluindo linguagens de programa\'e7\'e3o.\par
\par
\b 2. Origem do JavaScript e ECMA\par
\b0\par
JavaScript foi criado em 1995 por Brendan Eich enquanto trabalhava para a Netscape Communications Corporation. Inicialmente chamado "Mocha", o JavaScript evoluiu rapidamente e foi renomeado para "JavaScript" antes de seu lan\'e7amento oficial.\par
\par
Na \'e9poca de seu lan\'e7amento, a linguagem n\'e3o tinha um padr\'e3o formal, o que significava que diferentes navegadores poderiam implementar JavaScript de maneiras diferentes, levando a inconsist\'eancias e problemas de compatibilidade.\par
\par
\b 3. O Papel da ECMA na Padroniza\'e7\'e3o do JavaScript\par
\b0\par
Para resolver as quest\'f5es de compatibilidade e promover um padr\'e3o unificado, a Netscape decidiu colaborar com a ECMA International. Em novembro de 1996, a ECMA come\'e7ou a trabalhar na padroniza\'e7\'e3o do JavaScript, resultando no ECMAScript, um padr\'e3o formal para a linguagem.\par
\par
\b 4. ECMAScript: O Padr\'e3o para JavaScript\par
\par
- ECMAScript: \b0\'c9 o nome dado ao padr\'e3o definido pela ECMA para JavaScript. O padr\'e3o \'e9 formalizado no documento chamado \b ECMA-262\b0 . O ECMAScript define a sintaxe, o comportamento e as APIs b\'e1sicas da linguagem, garantindo que os implementadores (como navegadores e outros ambientes) sigam um conjunto comum de regras.\par
\par
\b 5. Import\'e2ncia da Padroniza\'e7\'e3o\par
\b0\par
A padroniza\'e7\'e3o pelo ECMAScript \'e9 crucial para:\par
\b - Compatibilidade: \b0 Garante que o c\'f3digo JavaScript funcione de forma consistente em diferentes ambientes e navegadores.\par
\b - Desenvolvimento: \b0 Facilita a ado\'e7\'e3o de novas funcionalidades e t\'e9cnicas, sabendo que elas ser\'e3o suportadas amplamente.\par
\b - Interoperabilidade: \b0 Permite que bibliotecas e frameworks trabalhem de maneira uniforme em diversos ambientes.\par
\par
\b 6. Conclus\'e3o\par
\b0\par
A ECMA International e seu padr\'e3o ECMAScript desempenham um papel fundamental na evolu\'e7\'e3o e na padroniza\'e7\'e3o do JavaScript. Ao estabelecer um padr\'e3o formal, a ECMA garante que o JavaScript possa ser usado de maneira consistente e confi\'e1vel em diversos navegadores e plataformas, ajudando a linguagem a se manter relevante e funcional \'e0 medida que a web e as tecnologias relacionadas evoluem.\par
\par
\par
\cf5\highlight4\b  Node.js\par
\highlight0\b0\par
\b 1. O que \'e9 Node.js?\par
\b0\par
Node.js \'e9 um ambiente de execu\'e7\'e3o de JavaScript que permite executar c\'f3digo JavaScript fora do navegador. Baseado no motor V8 do Google Chrome, Node.js usa um modelo de I/O n\'e3o-bloqueante e orientado a eventos, o que o torna ideal para aplica\'e7\'f5es de alta performance e escalabilidade.\par
\par
\b 2. Principais Caracter\'edsticas do Node.js\par
\b0\par
\b - Ass\'edncrono e N\'e3o-Bloqueante: \b0 Permite que as opera\'e7\'f5es de entrada/sa\'edda (I/O) sejam realizadas de forma ass\'edncrona, sem bloquear o fluxo do programa. Isso \'e9 \'fatil para aplica\'e7\'f5es que precisam lidar com v\'e1rias conex\'f5es simultaneamente, como servidores web.\par
  \par
\b - Event-Driven: \b0 Utiliza um modelo orientado a eventos, onde as a\'e7\'f5es s\'e3o tratadas por "event listeners" que respondem a eventos espec\'edficos.\par
\par
\b - Single-Threaded: \b0 Embora use um \'fanico thread para a execu\'e7\'e3o do c\'f3digo, Node.js pode lidar com m\'faltiplas conex\'f5es ao usar um loop de eventos e opera\'e7\'f5es de I/O ass\'edncronas.\par
\par
\b - NPM (Node Package Manager): \b0 Inclui um gerenciador de pacotes, o npm, que fornece acesso a uma vasta biblioteca de m\'f3dulos e pacotes para estender as funcionalidades do Node.js.\par
\par
\b 3. Uso Comum\par
\b0\par
\b - Desenvolvimento de Servidores e APIs: \b0 Node.js \'e9 frequentemente usado para criar servidores web e APIs RESTful.\b\par
  \par
- Aplica\'e7\'f5es em Tempo Real: \b0 Ideal para aplica\'e7\'f5es que requerem comunica\'e7\'e3o em tempo real, como chats e jogos online.\par
\par
\b - Ferramentas de Desenvolvimento: \b0 Usado em ferramentas de build e sistemas de gerenciamento de pacotes.\par
\cf0\par
\cf6\highlight4\b  React Native com Expo\par
\highlight0\b0\par
\b 1. O que \'e9 React Native?\par
\b0\par
React Native \'e9 um framework para desenvolvimento de aplicativos m\'f3veis que permite criar aplica\'e7\'f5es para iOS e Android usando JavaScript e React. Em vez de renderizar c\'f3digo em HTML, como na web, o React Native compila os componentes para widgets nativos.\par
\par
\b 2. Principais Caracter\'edsticas do React Native\par
\b0\par
\b - Desenvolvimento Multiplataforma: \b0 Permite criar aplicativos nativos para diferentes plataformas com um \'fanico c\'f3digo base.\par
  \par
\b - Componentes Nativos: \b0 Oferece componentes que s\'e3o renderizados como widgets nativos em dispositivos m\'f3veis, proporcionando uma experi\'eancia de usu\'e1rio semelhante a aplica\'e7\'f5es nativas.\par
\par
- \b Hot Reloading: \b0 Permite que desenvolvedores vejam as mudan\'e7as no c\'f3digo imediatamente sem reiniciar o aplicativo.\par
\par
\b 3. O que \'e9 Expo?\par
\b0\par
Expo \'e9 uma plataforma e um conjunto de ferramentas para o desenvolvimento de aplicativos React Native. Ele fornece uma s\'e9rie de bibliotecas e utilit\'e1rios que facilitam a cria\'e7\'e3o, o teste e o lan\'e7amento de aplicativos React Native.\par
\par
\b 4. Principais Caracter\'edsticas do Expo\par
\b0\par
\b - Ambiente de Desenvolvimento Simplificado: \b0 Fornece uma configura\'e7\'e3o inicial f\'e1cil e uma s\'e9rie de ferramentas prontas para uso, o que reduz a complexidade do processo de configura\'e7\'e3o.\par
\par
\b - Expo Go: \b0 Um aplicativo m\'f3vel que permite testar e visualizar o seu aplicativo diretamente no dispositivo sem a necessidade de compila\'e7\'e3o adicional.\par
\b\par
- APIs e Bibliotecas: \b0 Inclui uma s\'e9rie de APIs e bibliotecas para funcionalidades comuns, como acesso \'e0 c\'e2mera, localiza\'e7\'e3o e notifica\'e7\'f5es, sem a necessidade de configura\'e7\'e3o nativa complexa.\par
\par
\b - Desenvolvimento e Build: \b0 Oferece servi\'e7os para build e deploy de aplicativos, incluindo a cria\'e7\'e3o de pacotes e distribui\'e7\'e3o nas lojas de aplicativos.\par
\cf0\par
\cf7\highlight4\b  Rela\'e7\'e3o Entre Node.js e React Native com Expo\par
\highlight0\b0\par
\b Node.js e React Native:\par
\b0\par
\b - Back-End e Front-End: \b0 Node.js \'e9 frequentemente usado para construir o back-end de aplica\'e7\'f5es, enquanto o React Native \'e9 utilizado para criar o front-end (aplica\'e7\'f5es m\'f3veis). A comunica\'e7\'e3o entre o back-end (Node.js) e o front-end (React Native) pode ser feita via APIs RESTful ou GraphQL.\par
\par
\b Expo e React Native:\par
\b0\par
\b - Facilidade de Desenvolvimento: \b0 Expo facilita o desenvolvimento de aplicativos React Native ao fornecer uma configura\'e7\'e3o simplificada e ferramentas adicionais que n\'e3o est\'e3o presentes na configura\'e7\'e3o padr\'e3o do React Native. Com Expo, os desenvolvedores podem se concentrar mais na cria\'e7\'e3o do aplicativo e menos na configura\'e7\'e3o e no gerenciamento de depend\'eancias.\par
\par
\b Conclus\'e3o\par
\b0\par
\b - Node.js \b0\'e9 uma solu\'e7\'e3o poderosa para construir servidores e back-ends escal\'e1veis usando JavaScript.\par
\b - React Native \b0 permite criar aplicativos m\'f3veis nativos usando JavaScript, proporcionando uma experi\'eancia de usu\'e1rio rica e fluida.\par
\b - Expo \b0 simplifica o processo de desenvolvimento com React Native, oferecendo ferramentas e recursos que facilitam a cria\'e7\'e3o, teste e lan\'e7amento de aplicativos m\'f3veis.\par
\par
Ambos os frameworks, quando usados juntos, oferecem uma stack poderosa para o desenvolvimento de aplica\'e7\'f5es completas, desde o back-end at\'e9 o front-end em dispositivos m\'f3veis.\par
\cf0\par
\cf8\highlight4 APIs RESTful s\'e3o uma abordagem popular para construir interfaces de programa\'e7\'e3o de aplicativos (APIs) que seguem os princ\'edpios do \b REST \b0 (Representational State Transfer). Elas permitem que diferentes sistemas se comuniquem e troquem dados de forma eficiente e padronizada pela web. Vamos detalhar o que s\'e3o e como funcionam:\par
\highlight0\par
\highlight4\b  O que \'e9 uma API RESTful?\par
\highlight0\b0\par
\b API \b0 (Application Programming Interface) \'e9 um conjunto de defini\'e7\'f5es e protocolos que permitem que softwares diferentes se comuniquem entre si. Uma \b API RESTful \b0\'e9 uma API que segue os princ\'edpios do \b REST \b0 e utiliza HTTP como seu protocolo de comunica\'e7\'e3o.\par
\par
\highlight4\b  Princ\'edpios do REST\par
\highlight0\b0\par
\b 1. Stateless (Sem Estado):\par
\b0    - Cada solicita\'e7\'e3o do cliente para o servidor deve conter todas as informa\'e7\'f5es necess\'e1rias para que o servidor entenda e processe a solicita\'e7\'e3o. O servidor n\'e3o armazena informa\'e7\'f5es sobre o estado da sess\'e3o do cliente entre as solicita\'e7\'f5es.\par
\par
\b 2. Client-Server (Cliente-Servidor):\par
\b0    - A arquitetura REST separa o cliente do servidor, o que significa que o cliente e o servidor podem evoluir independentemente. O cliente faz solicita\'e7\'f5es para o servidor, e o servidor responde com os dados ou as a\'e7\'f5es solicitadas.\par
\par
\b 3. Cacheable (Cache\'e1vel):\par
\b0    - As respostas das APIs RESTful podem ser armazenadas em cache para melhorar o desempenho. Isso significa que as respostas de uma solicita\'e7\'e3o podem ser armazenadas temporariamente para que as solicita\'e7\'f5es subsequentes possam ser atendidas mais rapidamente.\par
\par
\b 4. Uniform Interface (Interface Uniforme):\par
\b0    - REST define uma interface uniforme entre os sistemas, o que simplifica a arquitetura e promove a interoperabilidade. Isso \'e9 alcan\'e7ado atrav\'e9s de padr\'f5es e conven\'e7\'f5es para as solicita\'e7\'f5es e respostas HTTP.\par
\par
\b 5. Layered System (Sistema em Camadas):\par
\b0    - A arquitetura REST permite que a API seja composta por v\'e1rias camadas de servidores, como proxies e gateways. Cada camada s\'f3 interage com a camada adjacente e n\'e3o tem conhecimento direto da arquitetura al\'e9m dela.\par
\par
\b 6. Code on Demand (C\'f3digo Sob Demanda) (Opcional):\par
\b0    - REST permite que o servidor forne\'e7a c\'f3digo execut\'e1vel (como scripts JavaScript) que pode ser usado pelo cliente. No entanto, essa abordagem n\'e3o \'e9 amplamente utilizada.\par
\par
\highlight4\b  M\'e9todos HTTP Comuns em APIs RESTful\par
\highlight0\b0\par
\b - GET: \b0 Usado para recuperar dados do servidor.\par
\b - POST: \b0 Usado para enviar dados ao servidor para criar um novo recurso.\par
\b - PUT: \b0 Usado para atualizar ou substituir um recurso existente no servidor.\par
\b - DELETE: \b0 Usado para excluir um recurso do servidor.\par
\b - PATCH: \b0 Usado para fazer atualiza\'e7\'f5es parciais em um recurso.\par
\par
\highlight4\b  Recursos e URLs\par
\highlight0\b0\par
Em APIs RESTful, recursos (dados ou objetos) s\'e3o identificados por URLs (Uniform Resource Locators). Cada URL representa um recurso espec\'edfico e as opera\'e7\'f5es sobre esse recurso s\'e3o realizadas atrav\'e9s dos m\'e9todos HTTP.\par
\par
\b Exemplo de URLs e M\'e9todos:\par
- GET /users: \b0 Recupera uma lista de usu\'e1rios.\par
\b - GET /users/\{id\}: \b0 Recupera um usu\'e1rio espec\'edfico com base no ID.\par
\b - POST /users: \b0 Cria um novo usu\'e1rio.\par
\b - PUT /users/\{id\}: \b0 Atualiza um usu\'e1rio espec\'edfico com base no ID.\par
\b - DELETE /users/\{id\}: \b0 Exclui um usu\'e1rio espec\'edfico com base no ID.\par
\par
\highlight4\b  Formatos de Dados\par
\highlight0\b0\par
APIs RESTful frequentemente utilizam \b JSON (JavaScript Object Notation) \b0 como o formato padr\'e3o para troca de dados devido \'e0 sua simplicidade e facilidade de uso. No entanto, outros formatos como \b XML (eXtensible Markup Language) \b0 tamb\'e9m podem ser utilizados.\par
\par
\highlight4\b  Benef\'edcios das APIs RESTful\par
\highlight0\b0\par
\b - Simplicidade: \b0 A interface uniforme e a utiliza\'e7\'e3o de m\'e9todos HTTP padr\'e3o tornam as APIs RESTful f\'e1ceis de entender e usar.\par
\b - Escalabilidade: \b0 A separa\'e7\'e3o entre cliente e servidor e a capacidade de cache ajudam a melhorar o desempenho e a escalabilidade.\par
\b - Interoperabilidade: \b0 O padr\'e3o REST facilita a comunica\'e7\'e3o entre diferentes sistemas e plataformas.\par
\b - Flexibilidade: \b0 APIs RESTful podem ser usadas com diferentes tipos de clientes e podem ser evolu\'eddas de forma independente do cliente.\par
\par
\highlight4\b  Conclus\'e3o\par
\highlight0\b0\par
APIs RESTful s\'e3o uma abordagem amplamente utilizada para criar interfaces de programa\'e7\'e3o de aplicativos que s\'e3o simples, escal\'e1veis e compat\'edveis com uma ampla variedade de sistemas. Seguindo os princ\'edpios do REST e utilizando m\'e9todos HTTP padr\'e3o, elas permitem uma comunica\'e7\'e3o eficiente e padronizada entre diferentes partes de um sistema.\par
}
 